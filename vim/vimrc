if has('nvim')
  colorscheme xcodedark
else
  colorscheme termschool
endif

set background=dark
set t_Co=256

set ignorecase " Case insensitive search
set incsearch  " Makes search act like search in modern browsers
set hlsearch   " Highlight search results
set backspace=2
set ruler
set colorcolumn=80,100 " show two rulers

" Whitespace
set nowrap                    " Do not wrap lines
set expandtab                 " Use spaces instead of tabs
set smarttab                  " Be smart when using tabs ;-)
set softtabstop=2             " 1 tab is 2 spaces
set shiftwidth=2
set tabstop=2
set foldmethod=indent         " Fold based on indentation.
set foldlevelstart=99         " Expand all folds by default.
set autoindent

" user commands (left is user command starting with capital letter, right is
" command that is executed
command W w
command CCC !bundle exec rubocop -A %
command LL !bundle exec erblint % --autocorrect

com! -nargs=1 Tabe tabe <args>

" Remap lowecase non-user (aka editor command) to a user command
cnoreabbrev rg Rg

" Enable backup. Save swap file to location
set directory^=$HOME/.vim/tmp/

" Disable backup. No swap files.
"set nobackup
"set nowb

" Window
syntax enable       " Syntax highlighting
set number  " Show line numbers
set relativenumber
set spelllang=en_ca

" statusline
set laststatus=2 " show current file path in statusline

nnoremap Q @@ " Instead of stumbling into ex mode, repeat the last macro used.

" Snippets
nnoremap ,div i<div></div><Esc>F>i
nnoremap ,5 i<% end %><Esc>F>i

nnoremap ,e :tabe % <CR>

autocmd FileType rust iabbrev <buffer> pl  println!()
autocmd FileType js iabbrev <buffer> pl println!()

map <Space> <Leader>
map <Leader>\ :nohlsearch<CR>

map <Leader>j :cnext<CR>
map <Leader>k :cprev<CR>
map <Leader>h :copen<CR>

map <Leader>N :set relativenumber!<CR>
map <Leader>b :Buffers<CR>
map <Leader>q :bd<CR>
map <Leader>' :s/"/'/g<CR>:nohlsearch<CR>
map <Leader>" :s/'/"/g<CR>:nohlsearch<CR>
map <Leader>y :FZF<CR>

map <Leader>n :ALENextWrap<CR>
map <Leader>< `<
map <Leader>> `>
map <Leader>. `.
map <Leader>v gv

" vim-test mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

" vim-rails jump between Test and non-test
nmap <silent> <leader>a :A<CR>

map <Leader>r :RG<CR>

set splitbelow " cause horizontal splits to go below the current buffer

" Navigate splits with Ctrl + <direction keys>
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

"key mapping for tab navigation
nmap <Tab> gt
nmap <S-Tab> gT
nmap \ ,

" F12 reloads the ~/.vimrc file
nnoremap <F12> :source ~/.vimrc<CR>

" Persistent undo
set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " Where to save histories
set undolevels=1000         " How many undos
set undoreload=10000        " Number of lines to save

" Automatically reload externally modified files when clean
set autoread

" Keep 3 context lines above and below the cursor
set scrolloff=3

" Don't Highlight cursor line
set nocul

" Set theme
" colorscheme Termschool
colorscheme xcodedark

" CtrlP/Command-T
set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.swn,*.zip

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

set showcmd
"set timeoutlen=250 " Time to wait after ESC (default causes an annoying delay)

autocmd BufWritePre *.js :%s/\s\+$//e

" Always highlight search matches in green
hi Search ctermbg=Green
hi Search ctermfg=Black

hi IndentGuidesOdd  ctermbg=236
hi IndentGuidesEven ctermbg=235

set wildmode=longest,list
set wildmenu

" Allows for autocomplete on path names
set path+=**

set complete+=kspell
autocmd FileType gitcommit setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.txt setlocal spell
autocmd BufRead,BufNewFile *.erb setlocal spell
autocmd BufRead,BufNewFile *.html setlocal spell

let g:netrw_liststyle = 3
let g:netrw_winsize = -28

highlight SignifySignAdd    ctermfg=green  guifg=#00ff00 cterm=NONE gui=NONE
highlight SignifySignDelete ctermfg=red    guifg=#ff0000 cterm=NONE gui=NONE
highlight SignifySignChange ctermfg=yellow guifg=#ffff00 cterm=NONE gui=NONE
function! s:sy_stats_wrapper()
  let [added, modified, removed] = sy#repo#get_stats()
  let symbols = ['+', '-', '~']
  let stats = [added, removed, modified]  " reorder
  let statline = ''

  for i in range(3)
    if stats[i] > 0
      let statline .= printf('%s%s ', symbols[i], stats[i])
    endif
  endfor

  if !empty(statline)
    let statline = printf('[%s]', statline[:-2])
  endif

  return statline
endfunction

function! MyStatusline()
  return ' %f '. s:sy_stats_wrapper()
endfunction

set statusline=%!MyStatusline()
